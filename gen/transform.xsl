<?xml version="1.0" encoding="UTF-8"?>
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
<xsl:output method="text"/>


<xsl:template match="/">
    <xsl:choose>
        <xsl:when test="$outputType='header'">
            <xsl:call-template name="header" />
        </xsl:when>
        <xsl:when test="$outputType='source'">
            <xsl:call-template name="source"/>
        </xsl:when>
        <xsl:otherwise>
            <xsl:value-of select="concat('Invalid outputType param: ',$outputType)"/>
        </xsl:otherwise>
    </xsl:choose>
</xsl:template>



<xsl:template name="header">
<xsl:call-template name="Licence"></xsl:call-template>
<xsl:text>&#x0A;<!-- new line --></xsl:text>

#ifndef IPCINTERFACE_H
#define IPCINTERFACE_H
<xsl:text disable-output-escaping="yes">
#include &quot;FleXdIPCConnector.h&quot;
#include &quot;FleXdEpoll.h&quot;
#include &quot;JsonObj.h&quot;
#include &quot;FleXdIPCMsg.h&quot;
#include &lt;memory&gt;
#include &lt;cstdint&gt;
</xsl:text>
namespace flexd {
   namespace gen {
    class IPCInterface : public flexd::icl::ipc::IPCConnector {
	public:
	    IPCInterface (flexd::icl::ipc::FleXdEpoll&amp; poller);
            virtual ~IPCInterface();
	<xsl:for-each select="/colection/file">   
	   <xsl:for-each select="document(@name)/package/function[@direction='out']">   
	    <xsl:text>    void </xsl:text>
	    <xsl:value-of select="concat('send',@name)"/>
	    <xsl:text>(</xsl:text>
	      <xsl:for-each select="parameter[@direction='out']">
	        <xsl:choose>
	        <xsl:when test="@type = 'std::string'">
                  <xsl:value-of select="concat('const ',@type,'&amp; ',@name)"/>
                </xsl:when>
                <xsl:otherwise>
                 <xsl:value-of select="concat(@type,' ',@name)"/>
               </xsl:otherwise>
               </xsl:choose>
               <xsl:choose><xsl:when test="position() != last()">, </xsl:when></xsl:choose>
	     </xsl:for-each>
            <xsl:text>);</xsl:text>
	    <xsl:text>&#x0A;<!-- new line --></xsl:text>
	    <xsl:text>        </xsl:text>
	   </xsl:for-each>
	</xsl:for-each>
	
	private:
            void send(std::shared_ptr&lt;flexd::icl::ipc::FleXdIPCMsg&gt; Msg);
            virtual void receiveMsg(flexd::icl::ipc::pSharedFleXdIPCMsg Msg) override;
	    
	<xsl:for-each select="/colection/file">
	<xsl:for-each select="document(@name)/package/function[@direction='in']">
	    <xsl:text>    virtual void </xsl:text>
	    <xsl:value-of select="concat('receive',@name)"/>
	    <xsl:text>(</xsl:text>    
	    <xsl:call-template name="parseParameters">
		<xsl:with-param name="element" select="parameter[@direction='out']"/>
	    </xsl:call-template>
	    <xsl:text>) = 0;</xsl:text>
	    <xsl:text>&#x0A;<!-- new line --></xsl:text>
	    <xsl:text>        </xsl:text>
	</xsl:for-each> 
	</xsl:for-each>    
	    uint32_t getTimestamp();
	private:
	    uint8_t m_counter;
    };
  }
}
#endif
</xsl:template>
     
     
<xsl:template name="source">
<xsl:call-template name="Licence"></xsl:call-template>
<xsl:text>&#x0A;<!-- new line --></xsl:text>
<xsl:comment>Autogenerated output, do not edit!</xsl:comment>

<xsl:text disable-output-escaping="yes">
#include &quot;JsonObj.h&quot;
#include &quot;FleXdIPCConnector.h&quot;
#include &quot;FleXdEpoll.h&quot;
#include &quot;FleXdIPCMsg.h&quot;
#include &quot;IPCInterface.h&quot;
#include &lt;string&gt;
#include &lt;vector&gt;
#include &lt;ctime&gt;
#include &lt;chrono&gt;
#include &lt;cstdint&gt;
</xsl:text>
    
namespace flexd {
  namespace gen {
  
	IPCInterface::IPCInterface (flexd::icl::ipc::FleXdEpoll&amp; poller)
	:IPCConnector(<xsl:for-each select="/colection/file">
		<xsl:choose>
	        <xsl:when test="position() = last()">
                  <xsl:call-template name="document"> 
                  <xsl:with-param name="doc" select="document(@name)"/>
		  </xsl:call-template>
                </xsl:when>
               </xsl:choose></xsl:for-each>, poller),
	 m_counter(0)
	{     
        <xsl:for-each select="/colection/file"><xsl:for-each select="document(@name)/package/element"><xsl:for-each select="parameter[@name='to']"> 
	  addPeer(<xsl:value-of select="@value"/>);</xsl:for-each></xsl:for-each></xsl:for-each>
	}
	
        IPCInterface::~IPCInterface()
        {
        }
       
       <xsl:for-each select="/colection/file">
       <xsl:for-each select="document(@name)/package/function[@direction='out']">
	   <xsl:text>&#x0A;<!-- new line --></xsl:text>
	   <xsl:text>       void IPCInterface::</xsl:text>
	    <xsl:value-of select="concat('send',@name)"/>
	    <xsl:text>(</xsl:text>
	     <xsl:for-each select="parameter[@direction='out']">
             <xsl:choose>
	        <xsl:when test="@type = 'std::string'">
                  <xsl:value-of select="concat('const ',@type,'&amp; ',@name)"/>
                </xsl:when>
                <xsl:otherwise>
                 <xsl:value-of select="concat(@type,' ',@name)"/>
               </xsl:otherwise>
               </xsl:choose>
               <xsl:choose><xsl:when test="position() != last()">, </xsl:when></xsl:choose>
	    </xsl:for-each>
	    <xsl:text>)</xsl:text>
       {
	   <xsl:call-template name="InitializeParameters">
	       <xsl:with-param name="element" select="//element/parameter"/>
	   </xsl:call-template>
	   <xsl:call-template name="InitializeParameters">
	       <xsl:with-param name="element" select="parameter[@direction='in']"/>
	   </xsl:call-template>
	   flexd::icl::JsonObj json = {};
	   
	    <xsl:for-each select="parameter[@direction='in']">
	   json.add<xsl:value-of select="concat('&lt;',@type,'&gt;(&quot;/',@name,'&quot;, ',@name,');')"/>
	   </xsl:for-each>
	   <xsl:for-each select="parameter[@direction='out']">
	   json.add<xsl:value-of select="concat('&lt;',@type,'&gt;(&quot;/payload/',@name,'&quot;, ',@name,');')"/>
	   </xsl:for-each>

	   std::string tmp = json.getJson();
           std::vector&lt;uint8_t&gt; payload(tmp.begin(), tmp.end());
           
           auto msg = std::make_shared&lt;flexd::icl::ipc::FleXdIPCMsg&gt;(<xsl:value-of select="concat('std::move(','payload',')',',true);')"/>
           auto addHeader = msg->getAdditionalHeader();
	   <xsl:for-each select="//element/parameter">
	     <xsl:choose>
	       <xsl:when test="@value = 'NAN'"></xsl:when>
	       <xsl:otherwise>
                 addHeader->setValue_<xsl:value-of select="position() - 1"/>
	         <xsl:value-of select="concat('(',@name,');')"/>
               </xsl:otherwise>
	     </xsl:choose>
	   </xsl:for-each>
           send(msg);
       }
       </xsl:for-each>
       </xsl:for-each>
       
       <xsl:text>&#x0A;<!-- new line --></xsl:text>
       <xsl:text>        </xsl:text>
       <xsl:value-of select="concat('void ','IPCInterface::','receive','Msg' ,'(flexd::icl::ipc::pSharedFleXdIPCMsg msg)')"/>
        {
            try{
		std::string str(msg->getPayload().begin(),msg->getPayload().end());
		flexd::icl::JsonObj json(str);
		if(json.exist(&quot;/id&quot;))
		{
		    int id; 
		    json.get&lt;int&gt;(&quot;/id&quot;, id);
		    switch(id)
		    {<xsl:for-each select="/colection/file">
		     <xsl:for-each select="document(@name)/package/function[@direction='in']">
			case <xsl:value-of select="parameter[@name='id']/@value"/>: {
			    <xsl:for-each select="parameter[@direction='out']">
			    <xsl:value-of select="concat(@type,' ',@name,';')"/>
			    <xsl:text>&#x0A;<!-- new line --></xsl:text>
			    <xsl:text>                            </xsl:text>
			    </xsl:for-each>
			    bool tmp = true;
			    <xsl:for-each select="parameter[@direction='out']">
			    if(json.exist(<xsl:value-of select="concat('&quot;/payload/',@name,'&quot;))')"/>{
				json.get<xsl:value-of select="concat('&lt;',@type,'&gt;(&quot;/payload/',@name,'&quot;, ',@name,');')"/> 
			    } else {
				tmp = false;}
			    </xsl:for-each>
			    <xsl:text>&#x0A;<!-- new line --></xsl:text>
			    <xsl:text>                            </xsl:text>
			    if(tmp){
			    <xsl:value-of select="concat('   receive',@name)"/>
			    <xsl:text>(</xsl:text>
			    <xsl:call-template name="parseParametersWithoutType">
			    <xsl:with-param name="element" select="parameter[@direction='out']"/>
			    </xsl:call-template>
			    <xsl:text>);</xsl:text>}
			    break; }
	    </xsl:for-each>
	    </xsl:for-each>
	           }
	        }
	   }catch(...){
		return;
	   }
        }
        
       
	void IPCInterface::send(std::shared_ptr&lt;flexd::icl::ipc::FleXdIPCMsg&gt; Msg)
        {
	   if(sendMsg(Msg))
	   {
	      m_counter++;
	   }
        }
        
        uint32_t IPCInterface::getTimestamp()
        {
	    std::chrono::time_point&lt;std::chrono::system_clock&gt; p;
	    p = std::chrono::system_clock::now();
	    std::time_t time = std::chrono::duration_cast&lt;std::chrono::milliseconds&gt;(p.time_since_epoch()).count();
	    return static_cast&lt;uint32_t&gt; (time);
        }  
        
     }
}
</xsl:template>

<xsl:template name="el">
	    <xsl:param name="element"/>
	      <xsl:for-each select="$element[@name='from']">
		  <xsl:value-of select="@value"/>
	      </xsl:for-each>
</xsl:template>
	
<xsl:template name="document">
	 <xsl:param name="doc"/>
	<xsl:call-template name="el"> 
	    <xsl:with-param name="element" select="$doc/package/element/parameter"/>
	</xsl:call-template>
</xsl:template>

<xsl:template name="parseParameters">
    <xsl:param name="element"/>
    <xsl:for-each select="$element">
        <xsl:choose>
            <xsl:when test="@type = 'std::string'">
            <xsl:value-of select="concat('const ',@type,'&amp; ',@name)"/>
            </xsl:when>
            <xsl:otherwise>
            <xsl:value-of select="concat(@type,' ',@name)"/>
            </xsl:otherwise>
        </xsl:choose>
        <xsl:choose>
            <xsl:when test="position() != last()">, </xsl:when>
        </xsl:choose>
    </xsl:for-each>
</xsl:template>

<xsl:template name="parseParametersWithoutType">
    <xsl:param name="element"/>
    <xsl:for-each select="$element">
        <xsl:value-of select="@name"/>
        <xsl:choose>
            <xsl:when test="position() != last()">, </xsl:when>
        </xsl:choose>
    </xsl:for-each>
</xsl:template>

<xsl:template name="InitializeParameters">
    <xsl:param name="element"/>
    <xsl:for-each select="$element">
         <xsl:choose>
	       <xsl:when test="@value = 'NAN'"></xsl:when>
	       <xsl:when test="@name = 'from'">
	       <xsl:value-of select="concat(@type,' ',@name,' = ')"/>
                 <xsl:value-of select="concat('getMyID()',';')"/>
	         <xsl:text>&#x0A;<!-- new line --></xsl:text>
                 <xsl:text>           </xsl:text>
	       </xsl:when>
	       <xsl:otherwise>
	         <xsl:value-of select="concat(@type,' ',@name,' = ')"/>
                 <xsl:value-of select="concat(@value,';')"/>
	         <xsl:text>&#x0A;<!-- new line --></xsl:text>
                 <xsl:text>           </xsl:text>
               </xsl:otherwise>
	     </xsl:choose>
    </xsl:for-each>
</xsl:template>

<xsl:template name="switchInternalInMethods">
    <xsl:param name="method"/>
        <xsl:for-each select="$method">
            case <xsl:value-of select="position()"/>:
                <xsl:value-of select="@name"/>(
                <xsl:call-template name="parseParameters">
	         <xsl:with-param name="element" select="parameter"/>
	        </xsl:call-template>);
                break;
        </xsl:for-each>
</xsl:template> 


<xsl:template name="Licence">
/*
Copyright (c) 2017, Globallogic s.r.o.
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
 * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
 * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
 * Neither the name of the Globallogic s.r.o. nor the
      names of its contributors may be used to endorse or promote products
      derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL GLOBALLOGIC S.R.O. BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
 
 
 /*
  *  Autogenerated output, do not edit!
  */
</xsl:template>

</xsl:stylesheet>




